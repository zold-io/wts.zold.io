- # SPDX-FileCopyrightText: Copyright (c) 2018-2025 Zerocracy
- # SPDX-License-Identifier: MIT

%img{src: iri.cut('/bitcoin-logo.svg'), style: 'height: 64px; float: right;'}

%h2
  Assets

- if defined?(guser) && vip?
  %div{style: 'background-color: #FE938C; padding: 1em; border: tomato 1px solid;'}
    %form{method: 'POST', action: iri.cut('/add-asset')}
      = Rack::Csrf.tag(env)
      %label Add cold asset:
      %input{type: 'text', name: 'address', maxlength: 64, size: 35, placeholder: 'Bitcoin address', autocomplete: 'off', tabindex: 1, required: true}
      %input{type: 'submit', tabindex: 2, value: 'Add'}
    %form{method: 'POST', action: iri.cut('/rename-item')}
      = Rack::Csrf.tag(env)
      %label Rename
      %input{type: 'text', name: 'from', maxlength: 64, size: 20, placeholder: 'Login', autocomplete: 'off', tabindex: 1, required: true}
      %label to:
      %input{type: 'text', name: 'to', maxlength: 64, size: 20, placeholder: 'New Login', autocomplete: 'off', tabindex: 1, required: true}
      %input{type: 'submit', tabindex: 2, value: 'Rename'}
    %form{method: 'POST', action: iri.cut('/decrypt-pkey')}
      = Rack::Csrf.tag(env)
      %label Decrypt:
      %input{type: 'text', name: 'text', size: 45, placeholder: 'Encrypted private key from Telegram channel', autocomplete: 'off', tabindex: 3, required: true}
      %input{type: 'submit', tabindex: 4, value: 'Decrypt'}
    %form{method: 'POST', action: iri.cut('/cold-to-hot')}
      %fieldset
        = Rack::Csrf.tag(env)
        %label Transfer from this cold address to a random hot one (pick the smallest one):
        %select{name: 'address', tabindex: 5}
          - assets.reject { |a| a[:hot] }.each do |a|
            %option{value: a[:address]}
              = "#{a[:address]} / #{format('%.02f', a[:value].to_f / 100_000_000)}"
        %label Private key of the cold address (64 hex digits):
        %input{type: 'password', name: 'pkey', size: 35, placeholder: 'Bitcoin private key', autocomplete: 'off', tabindex: 6, required: true}
        %label The amount to transfer:
        %input{type: 'text', name: 'amount', size: 8, placeholder: 'BTC', autocomplete: 'off', tabindex: 7, required: true}
        %input{type: 'submit', tabindex: 8, value: 'Send', onclick: "return confirm('Are you sure?')"}
    %form{method: 'POST', action: iri.cut('/cold-out')}
      %fieldset
        = Rack::Csrf.tag(env)
        %label Send to this address:
        %input{type: 'text', name: 'target', size: 42, autocomplete: 'off', tabindex: 9, required: true}
        %label From this cold address:
        %select{name: 'address', tabindex: 10}
          - assets.reject { |a| a[:hot] }.each do |a|
            %option{value: a[:address]}
              = "#{a[:address]} / #{format('%.02f', a[:value].to_f / 100_000_000)}"
        %label Private key of the cold address (64 hex digits):
        %input{type: 'password', name: 'pkey', size: 35, placeholder: 'Bitcoin private key', autocomplete: 'off', tabindex: 11, required: true}
        %label The amount to transfer:
        %input{type: 'text', name: 'amount', size: 8, placeholder: 'BTC', autocomplete: 'off', tabindex: 12, required: true}
        %input{type: 'submit', tabindex: 13, value: 'Send', onclick: "return confirm('Are you sure?')"}
    %p
      %a{href: iri.cut('/assets-private-keys')} Click here
      to see all private keys.
    %p
      %a{href: iri.add(empty: true)} Click here
      to see empty wallets too.

- if assets.empty?
  %p
    The list is empty. Most probably there is something wrong.
    Please,
    %a{href: 'https://t.me/zold_io'} contact us
    in our Telegram group.
- else
  %p
    The total balance is
    %strong= format('%.04f', balance)
    BTC
    - if defined? guser
      /
      approx.
      %a{href: 'https://coinmarketcap.com/currencies/bitcoin/'}
        = WTS::Dollars.new(price * balance)
  %p
    The biggest Bitcoin payout we can send at the moment is
    = format('%.04f', limit)
    BTC
    - if defined? guser
      = "(#{WTS::Dollars.new(limit * price)})"
  %table.compact
    %colgroup
      %col{style: 'width: 28em'}
      %col{style: 'width: 4em'}
      %col{style: 'width: 4em'}
      %col{style: ''}
    %thead
      %tr
        %th
          Address
        %th
          Balance
        %th
          Updated
        %th
    %tbody
      - assets.each do |a|
        %tr
          %td
            %a.monospace{href: "https://www.blockchain.com/btc/address/#{a[:address]}"}<
              = largetext(a[:address])
          %td.right.monospace{title: a[:value]}
            - if a[:value].zero?
              = '&mdash;'
            - else
              = format('%.04f', a[:value].to_f / 100_000_000)
          %td{title: a[:updated].utc.iso8601}
            = Zold::Age.new(a[:updated])
          %td
            - if a[:hot]
              - if a[:login].nil?
                %span.seagreen Change
              - else
                %span.seagreen Hot
            - else
              %span.firebrick Cold
  - if defined?(guser) && vip?
    %p
      Total:
      = assets.size
  %p
    = succeed ':' do
      %strong.firebrick ATTENTION
    Do not send your bitcoins to these addresses!
    Well, if you want to donate and increase our fund,
    which will bump the rate of ZLD, you can send a few
    bitcoins to any
    %strong.firebrick cold
    address from the list above.
  %p
    The system can send you bitcoins only from
    %span.seagreen hot
    addresses, while
    %span.firebrick cold
    ones are owned by the management of Zerocracy.
    Their private keys are not kept in the database.
    This is done for the sake of security of these digital funds.
